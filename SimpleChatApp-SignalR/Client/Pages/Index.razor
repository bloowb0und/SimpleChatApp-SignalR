@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net
@using SimpleChatApp_SignalR.Shared.DTOs
@using SimpleChatApp_SignalR.Shared.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http
@implements IAsyncDisposable
@inherits LayoutComponentBase

@if(!_isLogged)
{
<!-- Section: Log in -->
    <section class="text-center">
        <!-- Background image -->
        <div class="p-5 bg-image" style="
        background-image: url('https://mdbootstrap.com/img/new/textures/full/171.jpg');
        height: 300px;
        "></div>
        <!-- Background image -->

        <div class="card shadow-5-strong w-50 justify-content-center" style="
        background: hsla(0, 0%, 100%, 0.8);
        backdrop-filter: blur(30px);
        float: none;
        margin: -100px auto 10px;
        ">
            <div class="card-body py-5 px-md-5">

                <div class="row d-flex justify-content-center">
                    <div class="col-lg-8">
                        <h2 class="fw-bold mb-5">Log into your account</h2>
                        <form>
                            <div class="form-floating mb-3">
                                <input type="email" id="form2Example1" class="form-control" placeholder="Username" @bind="_username"/>
                                <label class="form-label" for="form2Example1">Username</label>
                            </div>
              
                            <div class="form-floating mb-3">
                                <input type="password" id="form2Example2" class="form-control" placeholder="Password" @bind="_password"/>
                                <label class="form-label" for="form2Example2">Password</label>
                            </div>
            
                            <!-- 2 column grid layout for inline styling -->
                            <div class="row mb-4">
                                <div class="col d-flex justify-content-center">
                                    <!-- Checkbox -->
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" value="" id="form2Example31" checked />
                                        <label class="form-check-label" for="form2Example31"> Remember me </label>
                                    </div>
                                </div>
                
                                <div class="col">
                                    <!-- Simple link -->
                                    <a href="#">Forgot password?</a>
                                </div>
                            </div>
            
                            <!-- Submit button -->
                            <button type="button" class="btn btn-primary btn-block mb-4" @onclick="LogIn">Log in</button>
            
                            <!-- Register buttons -->
                            <div class="text-center">
                                <p>Not a member? <a href="#">Register</a></p>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
<!-- Section: Log in -->
}
else
{
    <section>
        <div class="sidebar" style="width: 250px;">
            @* <NavMenu ChatList="_chatList ?? new List<ChatDTO>()"/> *@
            <div class="logo-row ps-3 navbar navbar-dark">
                <div class="container-fluid">
                    <a class="navbar-brand" href="">Simple Chat</a>
                    <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                </div>
            </div>
        
            <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
                <nav class="flex-column">
                    @foreach (var chat in _chatList)
                    {
                        <div class="nav-item px-3 @(_currentChat?.Id == chat.Id ? "text-decoration-underline fw-bold" : "")">
                            <NavLink class="nav-link" style="cursor: pointer;" Match="NavLinkMatch.All" @onclick="() => SetCurrentChat(chat)">
                                <span class="oi @(chat.IsPrivate ? "oi-person" : "oi-people")" aria-hidden="true"></span> @chat.Title
                            </NavLink>
                        </div>
                    }
                </nav>
            </div>
        </div>

        <main style="margin-left: 250px; margin-top: -960px;">
            <div class="top-row px-4 justify-content-between">
                <p class="mb-0 font-weight-bold">@_currentChat?.Title</p>
                <a href="#" target="_blank" class="text-decoration-underline">@(_currentUser?.Username)</a>
            </div>

            <article class="px-4 mt-md-3">
                <div class="container overflow-auto shadow-sm p-3 mb-4 bg-white rounded" style="height: 720px">
                    @if (!_messages.Any())
                    {
                        <p>Be first to send a message in this chat!</p>
                    }
    
                    @foreach (var message in _messages)
                    {
                        @if (message.VisibleToSender || message.SenderUsername != _currentUser?.Username)
                        {
                            if ((message.VisibleToSender && message.SenderUsername == _currentUser?.Username) || message.SenderUsername != _currentUser?.Username)
                            {
                                <div class="row d-flex mb-3 @(message.SenderUsername == _currentUser?.Username ? "justify-content-end" : "")">
                                    <div class="card w-50 p-0">
                                        <div class="card-header d-flex justify-content-between p-3 @(message.SenderUsername == _currentUser?.Username ? "bg-primary" : "")">
                                            <p class="fw-bold mb-0 @(message.SenderUsername == _currentUser?.Username ? "text-white" : "")">
                                                @message.SenderUsername @(message.RepliedUserUsername is not null ? $"replied to {(message.RepliedUserUsername == _currentUser?.Username ? "you" : message.RepliedUserUsername)}" : "")
                                            </p>
                                            <div class="@(message.SenderUsername == _currentUser?.Username ? "text-white" : "text-muted") small mb-0 d-flex align-items-center">
                                                <div class="d-flex align-items-center">
                                                    <i class="oi oi-clock"></i>
                                                </div>
                                                @message.DateCreated.ToString("HH:mm | MMM dd")
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <p class="mb-0">
                                                @message.Value
                                            </p>
                                        </div>
                                        <div class="card-footer p-2 d-flex justify-content-between @(message.SenderUsername == _currentUser?.Username ? "bg-primary" : "")">
                                            @if (message.DateLastEdited is not null)
                                            {
                                                <div class="small">
                                                    <u>Edited</u>: @(message.DateLastEdited is not null ? ((DateTime) message.DateLastEdited).ToString("HH:mm | MMM dd") : "")
                                                </div>
                                            }
                                            <div class="d-flex justify-content-between">
                                                @if (message.SenderUsername != _currentUser?.Username && _currentChat?.IsPrivate == false)
                                                {
                                                    <span class="oi oi-share mx-sm-2 fs-6 text-muted" style="cursor: pointer;" @onclick="@(() => { _repliedUser = new UserDTO {Username = message.SenderUsername, Id = message.UserId}; StateHasChanged(); })"></span>
                                                    <span class="oi oi-chat mx-sm-2 fs-6 text-muted" style="cursor: pointer;" @onclick="@(() => ReplyToPrivate(message))"></span>
                                                }
                                                else
                                                {
                                                    if (message.SenderUsername == _currentUser?.Username)
                                                    {
                                                        <span class="oi oi-pencil mx-sm-2 fs-6 text-white" style="cursor: pointer;" @onclick="@(() => StartEditingMessage(message))"></span>
                                                        <span class="oi oi-eye mx-sm-2 fs-6 text-white" style="cursor: pointer;" @onclick="@(() => DeleteMessage(message, false))"></span>
                                                        <span class="oi oi-trash mx-sm-2 fs-6 text-white" style="cursor: pointer;" @onclick="@(() => DeleteMessage(message, true))"></span>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>

                <div class="container">
                    @if (_repliedUser is not null)
                    {
                        <div class="col-10 mb-2">
                            <div class="d-flex justify-content-between px-2">
                                <div>
                                    <span class="oi oi-share fs-6"></span>
                                    <b>In reply to <u>@_repliedUser?.Username</u></b>
                                </div>
                                <div>
                                    <span class="oi oi-x fs-6" style="cursor: pointer;" @onclick="@(() => { _repliedUser = null; StateHasChanged(); })"></span>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="row align-items-center justify-content-between">
                        <div class="col">
                            <textarea @bind="_messageInput" class="form-control" placeholder="Type your message..."></textarea>
                        </div>
                        <div class="col-2">
                            <button type="button" class="btn btn-primary btn-lg" @onclick="_isEditingMessage ? EditMessage : Send" disabled="@(!IsConnected)">@(_repliedUser is null ? (_isEditingMessage ? "Edit" : "Send") : "Reply")</button>
                        </div>
                    </div>
                </div>
            </article>
        </main>
    </section>
}

@code
{
    private bool _isLogged;
    private string? _username;
    private string? _password;

    private readonly int _defaultMessageAmount = 20;
    
    private bool _isEditingMessage;
    private MessageDTO? _currentEditedMessage = null;
    private UserDTO? _repliedUser = null;

    private User? _currentUser = null;
    private ChatDTO? _currentChat = null;

    private List<ChatDTO> _chatList = new List<ChatDTO>();

    private HubConnection? _hubConnection;
    private List<MessageDTO> _messages = new();
    private string? _messageInput;

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    private async Task LogIn()
    {
        if (string.IsNullOrWhiteSpace(_username)
            || string.IsNullOrWhiteSpace(_password))
        {
            // todo: make alert
            return;
        }

        var userToAuthorize = new UserDTO()
        {
            Username = _username, 
            Password = _password, 
            Id = -1, 
            ChatsIds = new List<int>()
        };
        var response = await Http.PostAsJsonAsync("api/User/auth", userToAuthorize);

        if (response.StatusCode != HttpStatusCode.OK)
        {
            // todo: make alert
            return;
        }

        _currentUser = await response.Content.ReadFromJsonAsync<User>();
        
        if (_currentUser is null)
        {
            // todo: make alert
            return;
        }
        
        var chats = await Http.GetFromJsonAsync<IEnumerable<ChatDTO>>($"api/Chat/allchats/{_currentUser.Username}");
        
        if (chats is null)
        {
            // todo: make alert
            return;
        }
        
        _chatList = chats.ToList();
        await SetCurrentChat(_chatList[0]);

    // connect to signalr
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub"))
            .Build();

        _hubConnection.On<MessageDTO>("ReceiveMessage", (message) =>
        {
            if (message.ChatId == _currentChat?.Id)
            {
                _messages.Add(message);
            }

            // if (chats.Any(c => c.Id == message.ChatId))
            // {
            //     // todo: make notification for 
            // }

            StateHasChanged();
        });

        await _hubConnection.StartAsync();
        _isLogged = true;
    }

    private async Task Send()
    {
        if (_currentUser is not null
            && !string.IsNullOrWhiteSpace(_messageInput)
            && _hubConnection is not null)
        {
            var curMsg = new MessageDTO()
            {
                UserId = _currentUser.Id, 
                SenderUsername = _currentUser.Username, 
                Value = _messageInput, 
                ChatId = _currentChat.Id, 
                DateCreated = DateTime.Now, 
                DateLastEdited = null, 
                VisibleToSender = true, 
                RepliedUserId = _repliedUser?.Id,
                RepliedUserUsername = _repliedUser?.Username
            };
            
            await _hubConnection.SendAsync("SendMessage", curMsg);
            
            _repliedUser = null;
            _messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private void StartEditingMessage(MessageDTO oldMessage)
    {
        _currentEditedMessage = oldMessage;
        _messageInput = oldMessage.Value;
        _isEditingMessage = true;
        StateHasChanged();
    }
    
    private async Task DeleteMessage(MessageDTO oldMessage, bool visibleToSender)
    {
        if (oldMessage.UserId != _currentUser?.Id)
        {
            return;
        }

        var response = await Http.DeleteAsync($"api/Message/{oldMessage.Id}/{visibleToSender}");
        
        if (!response.IsSuccessStatusCode)
        {
            // todo: make alert
            return;
        }

        var idx = _messages.FindIndex(m => m.Id == oldMessage.Id);
        if (visibleToSender)
        {
            _messages.RemoveAt(idx);
        }
        else
        {
            oldMessage.VisibleToSender = visibleToSender;
            _messages[idx] = oldMessage;
        }
        
        StateHasChanged();
    }

    private async Task EditMessage()
    {
        if (_currentEditedMessage?.UserId != _currentUser?.Id)
        {
            return;
        }
        _currentEditedMessage.Value = _messageInput;
        _currentEditedMessage.DateLastEdited = DateTime.Now;

        var response = await Http.PutAsJsonAsync("api/Message", _currentEditedMessage);

        if (!response.IsSuccessStatusCode)
        {
            // todo: make alert
            return;
        }

        var idx = _messages.FindIndex(m => m.Id == _currentEditedMessage.Id);
        _messages[idx] = _currentEditedMessage;
        _currentEditedMessage = null;
        _isEditingMessage = false;
        
        _messageInput = string.Empty;
        StateHasChanged();
    }
    
    private void ReplyToPrivate(MessageDTO message)
    {
        throw new NotImplementedException();
    }

    // Navbar code
    
    private async Task SetCurrentChat(ChatDTO chatDto)
    {
        _currentChat = chatDto;
        // todo: load messages from api to message list
        var messages = await Http.GetFromJsonAsync<IEnumerable<MessageDTO>>($"api/Chat/messages/{_currentChat.Id}/{_defaultMessageAmount}");

        if (messages is null)
        {
            // todo: make alert
            return;
        }
        
        _messages.Clear();
        _messages = messages.OrderBy(m => m.DateCreated).ToList();
    }
    
    // navMenu base code
    private bool _collapseNavMenu = true;

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }
}