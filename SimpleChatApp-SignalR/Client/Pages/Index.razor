@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net
@using System.Collections
@using SimpleChatApp_SignalR.Shared.DTOs
@using SimpleChatApp_SignalR.Shared.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http
@implements IAsyncDisposable
@inherits LayoutComponentBase

<!-- Section: Log in -->
<section class="text-center" hidden="@(_isLogged)">
  <!-- Background image -->
  <div class="p-5 bg-image" style="
        background-image: url('https://mdbootstrap.com/img/new/textures/full/171.jpg');
        height: 300px;
        "></div>
  <!-- Background image -->

  <div class="card shadow-5-strong w-50 justify-content-center" style="
        background: hsla(0, 0%, 100%, 0.8);
        backdrop-filter: blur(30px);
        float: none;
        margin: -100px auto 10px;
        ">
    <div class="card-body py-5 px-md-5">

      <div class="row d-flex justify-content-center">
        <div class="col-lg-8">
          <h2 class="fw-bold mb-5">Log into your account</h2>
          <form>
              <div class="form-floating mb-3">
              <input type="email" id="form2Example1" class="form-control" placeholder="Username" @bind="_username"/>
              <label class="form-label" for="form2Example1">Username</label>
              </div>
              
                <div class="form-floating mb-3">
                    <input type="password" id="form2Example2" class="form-control" placeholder="Password" @bind="_password"/>
                    <label class="form-label" for="form2Example2">Password</label>
                </div>
            
                <!-- 2 column grid layout for inline styling -->
                  <div class="row mb-4">
                    <div class="col d-flex justify-content-center">
                      <!-- Checkbox -->
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="form2Example31" checked />
                        <label class="form-check-label" for="form2Example31"> Remember me </label>
                      </div>
                    </div>
                
                    <div class="col">
                      <!-- Simple link -->
                      <a href="#!">Forgot password?</a>
                    </div>
                  </div>
            
                <!-- Submit button -->
                <button type="button" class="btn btn-primary btn-block mb-4" @onclick="LogIn">Log in</button>
            
                <!-- Register buttons -->
                <div class="text-center">
                    <p>Not a member? <a href="#!">Register</a></p>
                </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- Section: Log in -->

<section hidden="@(!_isLogged)">
<div class="sidebar" style="width: 250px;">
        @* <NavMenu ChatList="_chatList ?? new List<ChatDTO>()"/> *@
        <div class="logo-row ps-3 navbar navbar-dark">
            <div class="container-fluid">
                <a class="navbar-brand" href="">SimpleChatApp-SignalR</a>
                <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                    <span class="navbar-toggler-icon"></span>
                </button>
            </div>
        </div>
        
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <nav class="flex-column">
                @foreach (var chat in _chatList)
                {
                    <div class="nav-item px-3 @(_currentChat.Id == chat.Id ? "text-decoration-underline fw-bold" : "")">
                        <NavLink class="nav-link" style="cursor: pointer;" Match="NavLinkMatch.All" @onclick="() => SetCurrentChat(chat)">
                            <span class="oi @(chat.IsPrivate ? "oi-person" : "oi-people")" aria-hidden="true"></span> @chat.Title
                        </NavLink>
                    </div>
                }
            </nav>
        </div>
</div>

<main style="margin-left: 250px; margin-top: -960px;">
        <div class="top-row px-4 justify-content-between">
            <p class="mb-0 font-weight-bold">@_currentChat?.Title</p>
            <a href="#" target="_blank" class="text-decoration-underline">@(_currentUser?.Username)</a>
        </div>

        <article class="px-4 mt-md-5">
            <div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height: 720px">
                @if (!_messages.Any())
                {
                    <p>Be first to send a message in this chat!</p>
                }
    
                @foreach (var message in _messages)
                {
                    <div class="row mb-3 d-flex @(message.SenderUsername == _currentUser.Username ? "justify-content-end" : "")">
                        <div class="card shadow @(message.SenderUsername == _currentUser.Username ? "color-green mr-5" : "")" style="width: 18rem;">
                            <div class="card-header">@message.SenderUsername</div>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">@message.Value</li>
                            </ul>
                            <div class="card-foot">
                                <span class="small">@message.DateCreated.ToString("HH:mm | MMM dd")</span>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="container">
                <div class="row">
                    <div class="col-6">
                        <textarea @bind="_messageInput" class="form-control" placeholder="Type your message..."></textarea>
                    </div>
                    <div class="col-3">
                        <button type="button" @onclick="Send" disabled="@(!IsConnected)">Send</button>
                    </div>
                </div>
            </div>
        </article>
    </main>
</section>

@code
{
    private bool _isLogged = false;
    private string? _username;
    private string? _password;

    private int _defaultMessageAmount = 20;

    private User _currentUser;
    private ChatDTO _currentChat;

    private List<ChatDTO> _chatList = new List<ChatDTO>();

    private HubConnection? _hubConnection;
    private List<MessageDTO> _messages = new();
    private string? _usernameInput;
    private string? _messageInput;
    private bool _isUserReadonly = false;

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
    // _hubConnection = new HubConnectionBuilder()
        //     .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        //     .Build();
        //
        // _hubConnection.On<User, Message>("ReceiveMessage", (user, message) =>
        // {
        //     _messages.Add(message);
        //     
        //     StateHasChanged();
        // });
        //
        // await _hubConnection.StartAsync();
    }

    private async Task LogIn()
    {
        if (string.IsNullOrWhiteSpace(_username)
            || string.IsNullOrWhiteSpace(_password))
        {
    // todo: make alert
        }

        var userToAuthorize = new UserDTO()
        {
            Username = _username, 
            Password = _password, 
            Id = -1, 
            ChatsIds = new List<int>()
        };
        var response = await Http.PostAsJsonAsync("api/User/auth", userToAuthorize);

        if (response.StatusCode != HttpStatusCode.OK)
        {
    // todo: make alert
        }

        _currentUser = await response.Content.ReadFromJsonAsync<User>();
        
        var chats = await Http.GetFromJsonAsync<IEnumerable<ChatDTO>>($"api/Chat/allchats/{_currentUser.Username}");
        
        _chatList = chats.ToList();
        _currentChat = _chatList[0];

    // connect to signalr
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub"))
            .Build();

        _hubConnection.On<MessageDTO>("ReceiveMessage", (message) =>
        {
            if (message.ChatId == _currentChat.Id)
            {
                _messages.Add(message);
            }

            // if (chats.Any(c => c.Id == message.ChatId))
            // {
            //     // todo: make notification for 
            // }
            
            // if (message.Chat.Users.FirstOrDefault(u => u.Username == _currentUser.Username) is not null)
            // {
            //     // todo: change to add to specific chat
            //     _messages.Add(message);
            // }

            StateHasChanged();
        });

        await _hubConnection.StartAsync();
        _isLogged = true;
    }

    private async Task Send()
    {
        if (_currentUser is not null
            && !string.IsNullOrWhiteSpace(_messageInput)
            && _hubConnection is not null)
        {
            // var curChat = await Http.GetFromJsonAsync<Chat>($"api/Chat/{_currentChat.Id}");
            // if (curChat is null)
            // {
            //     return;
            // }
            var curMsg = new MessageDTO() { UserId = _currentUser.Id, SenderUsername = _currentUser.Username, Value = _messageInput, ChatId = _currentChat.Id, DateCreated = DateTime.Now, DateLastEdited = null };
            
            await _hubConnection.SendAsync("SendMessage", curMsg);
            
            _messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
    
    // Navbar code
    
    private async Task SetCurrentChat(ChatDTO chatDto)
    {
        _currentChat = chatDto;
        // todo: load messages from api to message list
        var messages = await Http.GetFromJsonAsync<IEnumerable<MessageDTO>>($"api/Chat/messages/{_currentChat.Id}/{_defaultMessageAmount}");
        _messages.Clear();
        _messages = messages?.ToList();
    }
    
    // navMenu base code
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
